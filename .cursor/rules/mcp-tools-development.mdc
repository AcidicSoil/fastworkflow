---
description: 
globs: 
alwaysApply: false
---
# MCP Tools Development Guide

## Adding New MCP Tools

### Workflow Commands Become MCP Tools
All workflow commands in `_commands/` directories automatically become MCP tools via:
- **[fastworkflow/mcp_server_example.py](mdc:fastworkflow/mcp_server_example.py)** - `list_tools()` method
- **[fastworkflow/command_executor.py](mdc:fastworkflow/command_executor.py)** - `perform_mcp_tool_call()` method

### MCP Tool Schema Generation
```python
# Automatic schema generation from Pydantic command parameter classes
command_parameters_class = routing_definition.get_command_class(
    active_workitem_path, 
    command_name, 
    CommandModuleType.COMMAND_PARAMETERS_CLASS
)
```

**Schema includes:**
- JSON Schema from Pydantic model fields
- Required vs optional parameters
- Field descriptions and types
- Standard `command` and `workitem_path` parameters

## MCP Data Classes

### Core MCP Types in [fastworkflow/__init__.py](mdc:fastworkflow/__init__.py)
```python
class MCPToolCall(BaseModel):
    name: str
    arguments: Dict[str, Any]

class MCPContent(BaseModel):  
    type: str = "text"
    text: str

class MCPToolResult(BaseModel):
    content: List[MCPContent]
    isError: bool = False
```

### Converting Between Formats
- `CommandOutput.to_mcp_result()` - Converts to MCP format
- `CommandExecutor.action_from_mcp_tool_call()` - Converts from MCP format
- `WorkflowSession._convert_mcp_result_to_command_output()` - For queue compatibility

## MCP Server Implementation

### Key Methods in FastWorkflowMCPServer
```python
def list_tools() -> List[Dict[str, Any]]     # Tool discovery
def call_tool(name: str, arguments: Dict)    # Tool execution  
def handle_json_rpc_request(request: Dict)   # JSON-RPC 2.0 protocol
```

### Tool Definition Format
```json
{
    "name": "command_name",
    "description": "Execute command_name command in FastWorkflow", 
    "inputSchema": {...},  // JSON Schema
    "annotations": {
        "title": "Command Name",
        "readOnlyHint": false,
        "destructiveHint": false,
        "idempotentHint": false,
        "openWorldHint": true
    }
}
```

## Development Patterns

### Adding New Workflow Commands
1. Create command in appropriate `_commands/` directory
2. Define Pydantic parameter class for automatic schema generation
3. MCP tool is automatically available via `list_tools()`
4. Test via MCP server or agent integration

### Testing New MCP Tools
- **[tests/test_mcp_server_integration.py](mdc:tests/test_mcp_server_integration.py)** - Add test methods to existing test classes
- Test tool discovery, execution, and error handling
- Use real workflow data from `examples/retail_workflow/`

### MCP Protocol Compliance
- All tools return `MCPToolResult` with `content` array and `isError` flag
- JSON-RPC 2.0 protocol for external integrations
- Proper error handling and validation
- Schema generation follows MCP specification

## Common Use Cases

### External MCP Clients
```python
server = create_mcp_server_for_workflow("path/to/workflow")
tools = server.list_tools()
result = server.call_tool("tool_name", {"param": "value"})
```

### Agent Integration
```python  
# Plain utterance - wrapped automatically
agent_tool("What products do you have?")

# Structured MCP call - passed through directly  
mcp_call = {"type": "mcp_tool_call", "tool_call": {...}}
agent_tool(json.dumps(mcp_call))
```