---
description: 
globs: 
alwaysApply: false
---
# Single-file command consolidation pattern

Many commands in this repo were historically organised like:

```
_commands/<command_name>/
    parameter_extraction/
        signatures.py
    response_generation/
        command_implementation.py
        inference.py
    utterances/
        plain_utterances.json
        template_utterances.json
        generate_utterances.py
```

We are migrating every such command to a **single Python file** that sits
next to its siblings:

```
_commands/<command_name>.py
```

Inside that file we keep the same public surface but in a predictable
layout:

| Legacy location | Consolidated section |
|-----------------|----------------------|
| `parameter_extraction/signatures.py` | `class Signature.Input` |
| `parameter_extraction/signatures.py` (db_lookup) | `class Signature.db_lookup` |
| `parameter_extraction/signatures.py` (process_extracted_parameters) | `class Signature.process_extracted_parameters` |
| `response_generation/command_implementation.py` | `ResponseGenerator._process_command` |
| `response_generation/inference.py` entry point | `ResponseGenerator.__call__` |
| `utterances/plain_utterances.json` | `Signature.plain_utterances` constant |
| `utterances/generate_utterances.py` | `Signature.generate_utterances` |
| (optional) `template_utterances.json` | `Signature.template_utterances` constant |

Convention inside the consolidated file
---------------------------------------
1. Define `class Signature` at the top.  Sub-classes:
   * `Input`  – Pydantic model for command parameters.
   * `Output` – Pydantic model for command result.
   * Optional constants: `plain_utterances`, `template_utterances`.
   * Optional helper: `generate_utterances` that calls
     `fastworkflow.train.generate_synthetic.generate_diverse_utterances`.
   * If present in old implementation, move these methods from `InputForParamExtraction`:
     * `db_lookup(self, session: fastworkflow.Session, command: str) -> list[str]`
     * `process_extracted_parameters(self, session: fastworkflow.Session, command: str, cmd_parameters: "Signature.Input") -> None`
2. Implement business logic in `ResponseGenerator._process_command`.
3. Wrap that logic for chat runtime with `ResponseGenerator.__call__` which
   returns a `fastworkflow.CommandOutput`.

Migration checklist
-------------------
1. Move/copy code into the new file following the table above.
2. Update any imports that reference the old folder structure, e.g.
   `...<command_name>.parameter_extraction.signatures` → direct import from
   `<command_name>.py`.
3. Delete the now-empty `parameter_extraction/`, `response_generation/`,
   and `utterances/` directories when safe.

Once you see a command with the consolidated file present, **always open
that file first**—the older sub-folders are considered legacy and will be
removed after all imports are updated.

4. Inside `Signature.Input` set `model_config = ConfigDict(arbitrary_types_allowed=True, validate_assignment=True)` so type coercion works consistently at runtime.
