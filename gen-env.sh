#!/bin/bash

# if error, exit with a failure return code
set -e pipefail

ENV_GEN_FILE=".env"

# Declare associative array to store variables
declare -A env_vars

# Function to process env file and update variables
process_env_file() {
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip comments and empty lines
        if [[ $line =~ ^[[:space:]]*# ]] || [[ -z $line ]]; then
            continue
        fi
        
        # Split on first = only
        if [[ $line =~ ^([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            # Trim whitespace
            key="${key%%*( )}"
            env_vars[$key]="$value"
        fi
    done < "$1"
}

# Find and process base env files
base_files=$(find . -name "*.env" -not -path "./.env" -not -path "./override/*")
for file in $base_files; do
    process_env_file "$file"
done

# Process override files if they exist
if [ -d "override" ]; then
    override_files=$(find ./override -name "*.env")
    for file in $override_files; do
        process_env_file "$file"
    done
fi

# Write output file
printf "#\n# Do not edit this file. It is generated!\n#\n" > $ENV_GEN_FILE
# Create a sorted array of keys
readarray -t sorted_keys < <(printf '%s\n' "${!env_vars[@]}" | sort)
for key in "${sorted_keys[@]}"; do
    printf "%s=%s\n" "$key" "${env_vars[$key]}" >> $ENV_GEN_FILE
done
